% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exp_dist.R
\name{ruin_prob_exp}
\alias{ruin_prob_exp}
\title{Calculate the finite ruin probability of Poisson-Exponential process via Inverse Laplace transform using
Gaver-Stehfest algorithm}
\usage{
ruin_prob_exp(u, t, c, lambda, beta, ...)
}
\arguments{
\item{u}{Numerical. Initial surplus.}

\item{t}{Numerical. Terminal time.}

\item{c}{Numerical. Premium rate.}

\item{lambda}{Numerical. Claim arrival rate ("lambda" parameter of the Poisson process).}

\item{beta}{Numerical. Rate of the exponential distribution for the severity (mean of the distribution is \code{1/beta}).}

\item{...}{Optional argument to be passed to \code{\link{fn_gs}}.}
}
\value{
Numeric. Vector of length \code{n} if \code{try_n} is \code{TRUE} (Default). Otherwise, length is 1.
}
\description{
Note Gaver-Stehfest algorithm is theoretically convergent but practically high precision arithmetic is required.
This is not achieved in R as R4.0+ uses "long-double" in C, which is 64bit floating point. As a result, using high
\code{n} would yield results divergent to infinity. Therefore, small \code{n} should be used. Using default arguments,
values for different \code{n} would be printed along with a plot which assists in determining an appropriate \code{n}.
}
\details{
All arguments must be of length 1. For vectorized arguments, either use a loop or \code{apply} family, or \code{purrr}
package.

Net profit condition is assumed, i.e. \code{c-\lambda/beta > 0}.
}
\examples{

library(pruin)

c <- 1
lambda <- 1
beta <- 1.2

ruin_prob_exp(1,1,c,lambda,beta)

}
